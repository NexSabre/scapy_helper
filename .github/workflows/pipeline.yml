name: push pipeline
on: [push]
jobs:
  verify:
    name: Black & isort code verification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt
      - name: Verify code
        run: |
          black --check -t py36 .
  build:
    name: Build & test with Py
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.9, "3.10"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install scapy
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude .git,__pycache__,build,dist
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude .git,__pycache__,build,dist
      - name: Test with unittest
        run: |
          make test
      - name: Build a wheel package
        run: |
          python -m pip install setuptools wheel && python setup.py sdist bdist_wheel
  check_version:
    name: Check local version with the available at pypi.org
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check version
        run: |
          make version
  push_to_pypi:
    name: Release to pypi.org & GitHub Release
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    needs: [build, check_version, verify]
    steps:
      - uses: actions/checkout@v2
      - name: Clean, Build & Publish package
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          python -m pip install -r requirements-dev.txt
          python -m pip install setuptools wheel twine black[python27] isort
          make publish
      - name: Retrieve current version
        run: |
          echo "::set-output name=VERSION::$(cat VERSION)"
        id: version
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.version.outputs.VERSION }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: scapy_helper v${{ env.VERSION }}
          draft: false
          prerelease: false
      - name: Upload .tar.gz to GitHub Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.version.outputs.VERSION }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ format('dist/scapy_helper-{0}.tar.gz', env.VERSION) }}
          asset_name: ${{ format('scapy_helper-{0}.tar.gz', env.VERSION) }}
          asset_content_type: application/tar
